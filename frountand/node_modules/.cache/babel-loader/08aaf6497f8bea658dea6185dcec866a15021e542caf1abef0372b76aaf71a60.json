{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api';\nconst fetchUsers = async () => {\n  const response = await axios.get(`${API_BASE_URL}/users/user`);\n  return response.data;\n};\nconst generateInvoice = async invoiceData => {\n  const response = await axios.post(`${API_BASE_URL}/invoices/generate`, invoiceData);\n  console.log(response.data);\n  return response.data;\n};\nconst registerUser = async userData => {\n  const response = await axios.post(`${API_BASE_URL}/users/register`, userData);\n  return response.data;\n};\nconst Logging = async userData => {\n  const response = await axios.post(`${API_BASE_URL}/users/login`, userData);\n  return response.data;\n};\n_c = Logging;\nconst downloadInvoice = async pdfContent => {\n  try {\n    // Check if pdfContent is valid\n    if (!pdfContent || typeof pdfContent !== 'string') {\n      throw new Error('Invalid PDF content received');\n    }\n\n    // Convert the raw PDF content (string) into a Blob\n    const blob = new Blob([pdfContent], {\n      type: 'application/pdf'\n    });\n    console.log(blob);\n    // Create a temporary URL for the Blob\n    const url = window.URL.createObjectURL(blob);\n\n    // Create a link element to trigger the download\n    const link = document.createElement('a');\n    link.href = url;\n    link.setAttribute('download', 'invoice.pdf');\n    document.body.appendChild(link);\n\n    // Programmatically click the link to trigger the download\n    link.click();\n\n    // Clean up: remove the link and revoke the Blob URL\n    document.body.removeChild(link);\n    window.URL.revokeObjectURL(url);\n  } catch (error) {\n    console.error('Error downloading invoice:', error);\n  }\n};\nexport default {\n  fetchUsers,\n  generateInvoice,\n  downloadInvoice,\n  registerUser,\n  Logging\n};\nvar _c;\n$RefreshReg$(_c, \"Logging\");","map":{"version":3,"names":["axios","API_BASE_URL","fetchUsers","response","get","data","generateInvoice","invoiceData","post","console","log","registerUser","userData","Logging","_c","downloadInvoice","pdfContent","Error","blob","Blob","type","url","window","URL","createObjectURL","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","revokeObjectURL","error","$RefreshReg$"],"sources":["/mnt/c/Users/anupa/OneDrive/Desktop/react/assignment/frountand/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\nconst fetchUsers = async () => {\r\n  const response = await axios.get(`${API_BASE_URL}/users/user`);\r\n  return response.data;\r\n};\r\n\r\nconst generateInvoice = async (invoiceData) => {\r\n  const response = await axios.post(`${API_BASE_URL}/invoices/generate`, invoiceData);\r\n  console.log(response.data)\r\n\r\n  return response.data;\r\n};\r\nconst registerUser = async (userData) => {\r\n    const response = await axios.post(`${API_BASE_URL}/users/register`, userData);\r\n    return response.data;\r\n  };\r\n  const Logging = async (userData) => {\r\n    const response = await axios.post(`${API_BASE_URL}/users/login`, userData);\r\n    return response.data;\r\n  };\r\n  const downloadInvoice = async (pdfContent) => {\r\n    try {\r\n      // Check if pdfContent is valid\r\n      if (!pdfContent || typeof pdfContent !== 'string') {\r\n        throw new Error('Invalid PDF content received');\r\n      }\r\n  \r\n      // Convert the raw PDF content (string) into a Blob\r\n      const blob = new Blob([pdfContent], { type: 'application/pdf' });\r\n      console.log(blob)\r\n      // Create a temporary URL for the Blob\r\n      const url = window.URL.createObjectURL(blob);\r\n  \r\n      // Create a link element to trigger the download\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.setAttribute('download', 'invoice.pdf');\r\n      document.body.appendChild(link);\r\n  \r\n      // Programmatically click the link to trigger the download\r\n      link.click();\r\n  \r\n      // Clean up: remove the link and revoke the Blob URL\r\n      document.body.removeChild(link);\r\n      window.URL.revokeObjectURL(url);\r\n    } catch (error) {\r\n      console.error('Error downloading invoice:', error);\r\n    }\r\n  };\r\n  \r\n\r\nexport default {\r\n  fetchUsers,\r\n  generateInvoice,\r\n  downloadInvoice,\r\n  registerUser,\r\n  Logging\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;AAEhD,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EAC7B,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,YAAY,aAAa,CAAC;EAC9D,OAAOE,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,MAAMC,eAAe,GAAG,MAAOC,WAAW,IAAK;EAC7C,MAAMJ,QAAQ,GAAG,MAAMH,KAAK,CAACQ,IAAI,CAAC,GAAGP,YAAY,oBAAoB,EAAEM,WAAW,CAAC;EACnFE,OAAO,CAACC,GAAG,CAACP,QAAQ,CAACE,IAAI,CAAC;EAE1B,OAAOF,QAAQ,CAACE,IAAI;AACtB,CAAC;AACD,MAAMM,YAAY,GAAG,MAAOC,QAAQ,IAAK;EACrC,MAAMT,QAAQ,GAAG,MAAMH,KAAK,CAACQ,IAAI,CAAC,GAAGP,YAAY,iBAAiB,EAAEW,QAAQ,CAAC;EAC7E,OAAOT,QAAQ,CAACE,IAAI;AACtB,CAAC;AACD,MAAMQ,OAAO,GAAG,MAAOD,QAAQ,IAAK;EAClC,MAAMT,QAAQ,GAAG,MAAMH,KAAK,CAACQ,IAAI,CAAC,GAAGP,YAAY,cAAc,EAAEW,QAAQ,CAAC;EAC1E,OAAOT,QAAQ,CAACE,IAAI;AACtB,CAAC;AAACS,EAAA,GAHID,OAAO;AAIb,MAAME,eAAe,GAAG,MAAOC,UAAU,IAAK;EAC5C,IAAI;IACF;IACA,IAAI,CAACA,UAAU,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;MACjD,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;IACjD;;IAEA;IACA,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACH,UAAU,CAAC,EAAE;MAAEI,IAAI,EAAE;IAAkB,CAAC,CAAC;IAChEX,OAAO,CAACC,GAAG,CAACQ,IAAI,CAAC;IACjB;IACA,MAAMG,GAAG,GAAGC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACN,IAAI,CAAC;;IAE5C;IACA,MAAMO,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxCF,IAAI,CAACG,IAAI,GAAGP,GAAG;IACfI,IAAI,CAACI,YAAY,CAAC,UAAU,EAAE,aAAa,CAAC;IAC5CH,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC;;IAE/B;IACAA,IAAI,CAACO,KAAK,CAAC,CAAC;;IAEZ;IACAN,QAAQ,CAACI,IAAI,CAACG,WAAW,CAACR,IAAI,CAAC;IAC/BH,MAAM,CAACC,GAAG,CAACW,eAAe,CAACb,GAAG,CAAC;EACjC,CAAC,CAAC,OAAOc,KAAK,EAAE;IACd1B,OAAO,CAAC0B,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;EACpD;AACF,CAAC;AAGH,eAAe;EACbjC,UAAU;EACVI,eAAe;EACfS,eAAe;EACfJ,YAAY;EACZE;AACF,CAAC;AAAC,IAAAC,EAAA;AAAAsB,YAAA,CAAAtB,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}